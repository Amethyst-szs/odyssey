#pragma once

#include "LiveActor.h"

namespace al {
class TriangleFilterBase;
class CollisionPartsFilterBase;
class ActorCollisionController;

void getActorCollider(al::LiveActor const*);
bool isExistActorCollider(al::LiveActor const*);
void getActorCollisionPartsSensor(al::LiveActor const*);
bool isExistCollisionParts(al::LiveActor const*);
bool isEqualCollisionParts(al::LiveActor const*, al::CollisionParts const*);
void validateCollisionParts(al::LiveActor*);
void invalidateCollisionParts(al::LiveActor*);
void validateCollisionPartsBySystem(al::LiveActor*);
void invalidateCollisionPartsBySystem(al::LiveActor*);
void isValidCollisionParts(al::LiveActor const*);
void setCollisionPartsSpecialPurposeName(al::LiveActor*, char const*);
void resetAllCollisionMtx(al::LiveActor*);
void syncCollisionMtx(al::LiveActor*, sead::Matrix34<float> const*);
void syncCollisionMtx(al::LiveActor*, al::CollisionParts*, sead::Matrix34<float> const*);
void setSyncCollisionMtxPtr(al::LiveActor*, sead::Matrix34<float> const*);
bool isOnGround(al::LiveActor const*, unsigned int);
bool isOnGroundFace(al::LiveActor const*);
bool isCollidedGroundEdgeOrCorner(al::LiveActor const*);
bool isOnGroundNoVelocity(al::LiveActor const*, unsigned int);
bool isOnGroundDegree(al::LiveActor const*, float, unsigned int);
bool isOnGroundFaceDegree(al::LiveActor const*, float);
bool isOnGroundNoVelocityDegree(al::LiveActor const*, float, unsigned int);
void getOnGroundNormal(al::LiveActor const*, unsigned int);
void setColliderRadius(al::LiveActor*, float);
void setColliderOffsetY(al::LiveActor*, float);
void getColliderRadius(al::LiveActor const*);
void getColliderOffsetY(al::LiveActor const*);
void getColliderFixReaction(al::LiveActor const*);
void calcColliderPos(sead::Vector3<float>*, al::LiveActor const*);
void validateColliderRobustCheck(al::LiveActor*);
void invalidateColliderRobustCheck(al::LiveActor*);
void setColliderReactMovePower(al::LiveActor*, bool);
void calcColliderFloorRotatePower(sead::Quat<float>*, al::LiveActor*);
void calcJumpInertia(sead::Vector3<float>*, al::LiveActor*, sead::Vector3<float> const&, float);
bool isCollidedGround(al::LiveActor const*);
void calcJumpInertiaWall(sead::Vector3<float>*, al::LiveActor*, float);
bool isCollidedWall(al::LiveActor const*);
void scaleVelocityInertiaWallHit(al::LiveActor*, float, float, float);
void getCollidedWallNormal(al::LiveActor const*);
void calcCollidedNormalSum(al::LiveActor const*, sead::Vector3<float>*);
void calcGroundNormalOrUpDir(sead::Vector3<float>*, al::LiveActor const*);
void getCollidedGroundNormal(al::LiveActor const*);
void calcGroundNormalOrGravityDir(sead::Vector3<float>*, al::LiveActor const*);
void setColliderFilterTriangle(al::LiveActor*, al::TriangleFilterBase const*);
void setColliderFilterCollisionParts(al::LiveActor*, al::CollisionPartsFilterBase const*);
void createAndSetColliderFilterExistActor(al::LiveActor*);
void createAndSetColliderFilterExistActor(al::LiveActor*, al::LiveActor*);
void createAndSetColliderFilterSubActor(al::LiveActor*);
void createAndSetColliderSpecialPurpose(al::LiveActor*, char const*);
void createAndSetColliderSpecialPurposeForCollisionActor(al::LiveActor*, char const*);
void createAndSetColliderIgnoreOptionalPurpose(al::LiveActor*, char const*);
void createAndSetColliderSpecialAndIgnoreOptionalPurpose(al::LiveActor*, char const*, char const*);
void createActorCollisionController(al::LiveActor*);
void setColliderRadius(al::ActorCollisionController*, float);
void setColliderRadiusScale(al::ActorCollisionController*, float);
void setColliderOffsetY(al::ActorCollisionController*, float);
void resetActorCollisionController(al::ActorCollisionController*, int);
void updateActorCollisionController(al::ActorCollisionController*);
void getCollidedFloorMaterialCodeName(al::LiveActor const*);
void getCollidedFloorMaterialCodeName(al::Collider const*);
void getCollidedWallMaterialCodeName(al::LiveActor const*);
void getCollidedCeilingMaterialCodeName(al::LiveActor const*);
bool isCollidedFloorCode(al::LiveActor const*, char const*);
bool isCollidedCollisionCode(al::LiveActor const*, char const*, char const*);
bool isCollidedWallCode(al::LiveActor const*, char const*);
bool isCollidedCameraCode(al::LiveActor const*, char const*);
bool isCollidedMaterialCode(al::LiveActor const*, char const*);
bool isCollidedGroundFloorCode(al::LiveActor const*, char const*);
bool isCollidedGroundCollisionCode(al::LiveActor const*, char const*, char const*);
bool isCollided(al::LiveActor const*);
bool isCollidedCeiling(al::LiveActor const*);
bool isCollidedWallFace(al::LiveActor const*);
bool isCollidedVelocity(al::LiveActor const*);
bool isCollidedWallVelocity(al::LiveActor const*);
bool isCollidedCeilingVelocity(al::LiveActor const*);
void getCollidedCeilingNormal(al::LiveActor const*);
void getCollidedGroundPos(al::LiveActor const*);
void getCollidedWallPos(al::LiveActor const*);
void getCollidedCeilingPos(al::LiveActor const*);
void calcSpeedCollideWall(al::LiveActor const*);
void calcSpeedCollideGround(al::LiveActor const*);
void calcSpeedCollideCeiling(al::LiveActor const*);
void getCollidedGroundCollisionParts(al::LiveActor const*);
bool tryGetCollidedGroundCollisionParts(al::LiveActor const*);
void getCollidedWallCollisionParts(al::LiveActor const*);
bool tryGetCollidedWallCollisionParts(al::LiveActor const*);
void getCollidedCeilingCollisionParts(al::LiveActor const*);
bool tryGetCollidedCeilingCollisionParts(al::LiveActor const*);
void getCollidedGroundSensor(al::LiveActor const*);
bool tryGetCollidedGroundSensor(al::LiveActor const*);
void getCollidedWallSensor(al::LiveActor const*);
bool tryGetCollidedWallSensor(al::LiveActor const*);
void getCollidedCeilingSensor(al::LiveActor const*);
bool tryGetCollidedCeilingSensor(al::LiveActor const*);
bool tryGetCollidedSensor(al::LiveActor const*);
bool tryGetCollidedPos(sead::Vector3<float>*, al::LiveActor const*);
void setForceCollisionScaleOne(al::LiveActor const*);
void followRotateFrontAxisUpGround(al::LiveActor*);
void followRotateFrontAxisUp(al::LiveActor*, al::CollisionParts const*);
// void ActorFactory::ActorFactory(char const*);
}  // namespace al